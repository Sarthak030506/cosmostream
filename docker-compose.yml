version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cosmostream-postgres
    environment:
      POSTGRES_DB: cosmostream
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds/dev_data.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cosmostream-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: cosmostream-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # GraphQL API
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: cosmostream-api
    ports:
      - '4000:4000'
    environment:
      PORT: 4000
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/cosmostream
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: npm run dev

  # Media Processor
  media-processor:
    build:
      context: .
      dockerfile: ./apps/media-processor/Dockerfile
    container_name: cosmostream-media-processor
    ports:
      - '4002:4002'
    environment:
      PORT: 4002
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/cosmostream
      REDIS_URL: redis://redis:6379
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/media-processor:/app
      - /app/node_modules
    command: npm run dev

  # Realtime WebSocket Server
  realtime:
    build:
      context: .
      dockerfile: ./apps/realtime/Dockerfile
    container_name: cosmostream-realtime
    ports:
      - '4001:4001'
    environment:
      PORT: 4001
      NODE_ENV: development
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/realtime:/app
      - /app/node_modules
    command: npm run dev

  # Next.js Frontend
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: cosmostream-web
    ports:
      - '3000:3000'
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000/graphql
      NEXT_PUBLIC_WS_URL: ws://localhost:4001
    depends_on:
      - api
      - realtime
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
